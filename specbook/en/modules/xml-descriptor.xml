<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="xml">
  <title>XML deployment descriptor</title>

  <para>Two kind of XML descriptors are used by Bean Validation. The first one
  describes the Bean Validation configuration provided as
  <filename>META-INF/validation.xml</filename>. The second one describes
  constraints declarations and closely matches the annotations declaration
  approach.</para>

  <section id="xml-mapping">
    <title>Constraint definition and declaration</title>

    <para>Bean Validation lets you declare constraints via XML rather than
    annotations. You can either ignore constraints declared via annotations or
    consider XML as adding additional constraints on top of annotation
    constraints. While it is not possible to define a new constraint via XML,
    you can redefine the list of <classname>ConstraintValidator</classname>
    classes associated to a given constraint definition.</para>

    <para>There is no distinction between an annotation based constraint
    declaration and an XML based constraint declaration: they are considered
    equivalent and should be treated as such by the Bean Validation provider.
    The rest of the specification only refers to annotations as validation
    metadata: it should be read as annotation or their XML descriptor
    equivalent.</para>

    <para>Specifically when exploring metadata, the Bean Validation provider
    must ensure that an annotation instance corresponding to the XML
    declaration is provided via
    <classname>ConstraintDescriptor.getAnnnotation()</classname>. The
    annotation elements as well as
    <methodname>ConstraintValidator.getAttributes()</methodname> must reflect
    the values described in the XML declaration (see <xref
    linkend="xml-mapping-typeconversion" />). Likewise,
    <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>
    must reflect XML based constraint definition overriding (see <xref
    linkend="xml-mapping-constraintdefinition" />).</para>

    <para>A given class must not be described more than once amongst all the
    XML mapping descriptors. A given field or getter must not be described
    more than once on a given class description. A given constraint definition
    must not be overridden more than once amongst all the XML mapping
    descriptors. If any of these rule is violated in a given validation
    deployment, a <classname>ValidationException</classname> is raised during
    the creation of the <classname>ValidatorFactory</classname>.</para>

    <para>The schema is provided in <xref linkend="xml-mapping-xsd" />.</para>

    <section>
      <title>Constraint declaration in XML</title>

      <para>If <literal>default-package</literal> is set, all unqualified
      class names (including annotations) are considered part of the package
      described by <literal>default-package</literal>.</para>

      <para>A given JavaBean is described by the <classname>bean</classname>
      element. The name of the class is mandatory. By default, all constraint
      declarations expressed via annotation are ignored for classes described
      in XML. You can force Bean Validation to consider both annotations and
      XML constraint declarations by using
      <code>ignore-annotation="false"</code> on
      <literal>bean</literal>.</para>

      <note>
        <para>The <literal>ignore-annotation</literal> setting is not
        inherited from nor by the class hierarchy. In other words, it only
        applies to the current bean only.</para>
      </note>

      <para>If the name of the class does refer to a class not present in in
      the classpath, a <classname>ValidationException</classname> is
      raised.</para>

      <example>
        <title>Example of bean XML declaration</title>

        <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;

    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;

    &lt;bean class="Customer" ignore-annotations="false"&gt;
        [...]
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        [...]
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
      </example>

      <section>
        <title>Class-level overriding</title>

        <para>Class level annotations are described via the
        <literal>class</literal> element. If
        <literal>ignore-annotations</literal> is declared, Bean Validation
        must honor the explicit value for this element. If not declared, the
        default value defined in the encapsulating <classname>bean</classname>
        element is considered.</para>

        <para>When <literal>ignore-annotations</literal> is true, class-level
        Bean Validation annotations are ignored for this class (including the
        <classname>@GroupSequence</classname>). When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para>Constraints declared in XML and constraints declared in
            annotations are added and form the list of class-level declared
            constraints.</para>
          </listitem>

          <listitem>
            <para><classname>@GroupSequence</classname> is considered unless
            <literal>group-sequence</literal> element is explicitly
            used.</para>
          </listitem>
        </itemizedlist>

        <example>
          <title>Example of class-level declaration</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;class ignore-annotations="true"&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        &lt;class&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section>
        <title>Field-level overriding</title>

        <para>Field level annotations are described via the
        <literal>field</literal> element. The <literal>name</literal>
        attribute correspond to the name of the field considered. If
        <literal>ignore-annotations</literal> is declared, Bean Validation
        must honor the explicit value for this element. If not declared, the
        default value defined in the encapsulating <classname>bean</classname>
        element is considered.</para>

        <para>When <literal>ignore-annotations</literal> is true, field-level
        Bean Validation annotations on the targeted field are ignored
        (including the <classname>@Valid</classname>). When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para>Constraints declared in XML and constraints declared in
            annotations are added and form the list of field-level declared
            constraints.</para>
          </listitem>

          <listitem>
            <para><classname>@Valid</classname> is considered unless the
            <literal>valid</literal> element is explicitly used. Note that the
            only way to disable cascading on a field marked as
            <classname>@Valid</classname> is to use
            <code>ignore-annotations=true</code>.</para>
          </listitem>
        </itemizedlist>

        <para>If the name of the field does not correspond to a field in the
        given bean a <classname>ValidationException</classname> is
        raised.</para>

        <example>
          <title>Field-level declaration</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;field name="firstName"&gt;
            [...]
        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/field&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section>
        <title>Property-level overriding</title>

        <para>Property-level annotations are described via the
        <literal>getter</literal> element. The <literal>name</literal>
        attribute correspond to the name of the property considered as defined
        in <xref
        linkend="constraintdeclarationvalidationprocess-requirements-property" />
        (for example a getter <code>String getAge()</code> would have
        <code>&lt;getter name="age"/&gt;</code> as a corresponding
        descriptor). If <literal>ignore-annotations</literal> is declared,
        Bean Validation must honor the explicit value for this element. If not
        declared, the default value defined in the encapsulating
        <classname>bean</classname> element is considered.</para>

        <para>When <literal>ignore-annotations</literal> is true,
        property-level Bean Validation annotations on the targeted property
        are ignored (including the <classname>@Valid</classname>). When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para>Constraints declared in XML and constraints declared in
            annotations are added and form the list of property-level declared
            constraints.</para>
          </listitem>

          <listitem>
            <para><classname>@Valid</classname> is considered unless the
            <literal>valid</literal> element is explicitly used. Note that the
            only way to disable cascading on a property marked as
            <classname>@Valid</classname> is to use
            <code>ignore-annotations=true</code>.</para>
          </listitem>
        </itemizedlist>

        <para>If the name of the property does not correspond to a property in
        the given bean a <classname>ValidationException</classname> is
        raised.</para>

        <example>
          <title>Property-level declaration</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;getter name="firstName"&gt;
            [...]
        &lt;/getter&gt;
        &lt;getter name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/getter&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section>
        <title>Constraint declaration</title>

        <para>A new constraint declaration is represented by the
        <literal>constraint</literal> element. The
        <literal>annotation</literal> attribute is the class name of the
        annotation representing the constraint. Message, groups and payload
        are defined respectively by the <literal>message</literal>,
        <literal>groups</literal> and <literal>payload</literal>
        elements.</para>

        <para>Other custom elements of an annotation are represented by
        <literal>element</literal>. The <literal>name</literal> attribute is
        mandatory and represents the name of the element in the constraint
        declaration. <quote>message</quote>, <quote>groups</quote> and
        <quote>payload</quote> are not permitted names, use the
        <literal>message</literal>, <literal>groups</literal> or
        <literal>payload</literal> elements instead. Otherwise a
        <classname>ValidationException</classname> is raised.</para>

        <para>If the element represents a primitive type, a class or an enum,
        the string representation of its value is placed in the element
        itself. See <xref linkend="xml-mapping-typeconversion" /> for a
        detailed explanation of the conversion rules from string to the
        type.</para>

        <para>If the element represents a primitive type array, a class array
        or an enum array, the string representation of each value is placed in
        a <literal>value</literal> element placed under the element
        itself.</para>

        <para>If the element represents an annotation, the
        <literal>annotation</literal> element is used to represent the
        annotation and placed under <literal>element</literal>. An
        <literal>annotation</literal> element contains
        <literal>element</literal> elements.</para>

        <para>If the element represents an array of annotations, one or more
        <literal>annotation</literal> elements are placed under
        <literal>element</literal>.</para>

        <para>Elements with default values in the annotation definition do not
        have to be represented in XML: the default value will be used in this
        case. If an XML constraint declaration is missing mandatory elements,
        or if it contains elements not part of the constraint definition, a
        <classname>ValidationException</classname> is raised.</para>

        <example>
          <title>Constraint declaration</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;

        &lt;field name="firstName"&gt;


            &lt;!-- @LooksLike(patterns={
                      @Pattern(value="myRegExp", flag=PatternFlag.INSENSITIVE),
                      @Pattern(value="my2ndRegExp")}
                  )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.LooksLike"&gt;
                &lt;element name="patterns"&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;myRegExp&lt;/element&gt;
                        &lt;element name="flag"&gt;
                            &lt;value&gt;INSENSITIVE&lt;/value&gt;
                        &lt;/element&gt;
                    &lt;/annotation&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;my2ndRegExp&lt;/element&gt;
                    &lt;/annotation&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @DiscreteSize(value={ 0, 20 } )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.DiscreteSize"&gt;
                &lt;element name="value"&gt;
                    &lt;value&gt;0&lt;/value&gt;
                    &lt;value&gt;20&lt;/value&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;

        &lt;getter name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @Size(message="Size is limited",
                       groups={Default.class, LightValidation.class},
                       max=30
                 )
            --&gt;
            &lt;constraint annotation="javax.validation.constraint.Size"&gt;
                &lt;message&gt;Size is limited&lt;/message&gt;
                &lt;groups&gt;
                    &lt;value&gt;com.acme.app.model.LightValidation&lt;/value&gt;
                    &lt;value&gt;javax.persistence.Default&lt;/value&gt;
                &lt;/groups&gt;
                &lt;payload&gt;
                    &lt;value&gt;com.acme.app.model.WARN&lt;/value&gt;
                &lt;/payload&gt;
                &lt;element name="max"&gt;30&lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/getter&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>
    </section>

    <section id="xml-mapping-constraintdefinition">
      <title>Overriding constraint definitions in XML</title>

      <para>A constraint definition (i.e. the annotation representing a
      constraint), cannot be fully expressed in XML but the list of
      <classname>ConstraintValidator</classname> associated to a given
      constraint can be altered.</para>

      <para>A constraint definition is represented by a
      <literal>constraint-definition</literal> element. The
      <literal>annotation</literal> attribute represents the constraint
      annotation being altered. The <literal>validated-by</literal> elements
      represent the (ordered) list of
      <classname>ConstraintValidator</classname> implementations associated to
      the constraint.</para>

      <para>If <literal>include-existing-validator</literal> is set to false,
      <classname>ConstraintValidator</classname> defined on the constraint
      annotation are ignored. If set to true, the list of
      <classname>ConstraintValidator</classname>s described in XML are
      concatenated to the list of <classname>ConstraintValidator</classname>
      described on the annotation to form a new array of
      <classname>ConstraintValidator</classname> evaluated. Annotation based
      <classname>ConstraintValidator</classname> come before XML based
      <classname>ConstraintValidatot</classname> in the array. The new list is
      returned by
      <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>.</para>

      <example>
        <title>Overriding constraint definitions</title>

        <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
   &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
   &lt;bean class="com.acme.common.model.Address"&gt;
       [...]
    &lt;/bean&gt;

    &lt;constraint-definition annotation="javax.validation.constraint.Size"&gt;
        &lt;validated-by include-existing-validators="true"&gt;
            &lt;value&gt;com.acme.app.constraint.SizeValidatorForDictionary&lt;/value&gt;
        &lt;/validated-by&gt;
    &lt;/constraint-definition&gt;
    &lt;constraint-definition annotation="AcmeOrderNumber"&gt;
        [...]
    &lt;/constraint-definition&gt;
&lt;/constraint-mappings&gt;</programlisting>
      </example>
    </section>

    <section id="xml-mapping-typeconversion">
      <title>Converting the string representation of a value</title>

      <para>Primitive types, <classname>Class</classname> and
      <classname>Enum</classname> are represented as strings in the XML
      descriptor. Elements of an array are represented by the
      <literal>value</literal> element.</para>

      <para><classname>byte</classname> are represented according to the rules
      defined in <methodname>Byte.parseByte(String)</methodname>.</para>

      <para><classname>short</classname> are represented according to the
      rules defined in
      <methodname>Short.parseShort(String)</methodname>.</para>

      <para><classname>int</classname> are represented according to the rules
      defined in <methodname>Integer.parseInt(String)</methodname>.</para>

      <para><classname>long</classname> are represented according to the rules
      defined in <methodname>Long.parseLong(String)</methodname>.</para>

      <para><classname>float</classname> are represented according to the
      rules defined in
      <methodname>Float.parseFloat(String)</methodname>.</para>

      <para><classname>double</classname> are represented according to the
      rules defined in
      <methodname>Double.parseDouble(String)</methodname>.</para>

      <para><classname>boolean</classname> are represented according to the
      rules defined in
      <methodname>Boolean.parseBoolean(String)</methodname>.</para>

      <para><classname>char</classname> are represented according to the
      following rules:</para>

      <itemizedlist>
        <listitem>
          <para>the string must be of one character long</para>
        </listitem>

        <listitem>
          <para>the character extracted from the string is the returned
          <classname>char</classname></para>
        </listitem>
      </itemizedlist>

      <para>A <classname>Class</classname> is represented by the fully
      qualified class name of the class. Note that if the raw string is
      unqualified, default package is taken into account.</para>

      <para>An enum is represented by its <code>enum.name()</code>
      value.</para>

      <para>If any of the string representation does not match its type
      counterpart, a <classname>ValidationException</classname> is
      raised.</para>
    </section>

    <section id="xml-mapping-xsd">
      <title>XML Schema</title>

      <para>This section contains the XML schema used for constraint
      mapping.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/mapping"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           version="1.0"&gt;
    &lt;xs:element name="constraint-mappings"
                type="map:constraint-mappingsType"
                xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;

    &lt;xs:complexType name="payloadType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupSequenceType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-mappingsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-package" minOccurs="0"/&gt;
            &lt;xs:element type="map:beanType"
                        name="bean"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:constraint-definitionType"
                        name="constraint-definition"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="validated-byType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="include-existing-validators" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraintType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="message" minOccurs="0"/&gt;
            &lt;xs:element type="map:groupsType"
                        name="groups"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:payloadType"
                        name="payload"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;            
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="elementType" mixed="true"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="map:annotationType"
                        name="annotation"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="classType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:groupSequenceType" 
                        name="group-sequence" 
                        minOccurs="0" 
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="beanType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:classType"
                        name="class"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"&gt;
            &lt;/xs:element&gt;
            &lt;xs:element type="map:fieldType"
                        name="field"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:getterType"
                        name="getter"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="class" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="annotationType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="getterType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-definitionType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:validated-byType"
                        name="validated-by"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="fieldType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</programlisting>
    </section>
  </section>

  <section id="xml-config-xsd">
    <title>Configuration schema</title>

    <para>XML Configuration is set in
    <filename>META-INF/validation.xml</filename>. The file is optional. The
    XML schema followed by the configuration file is as followed.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/configuration"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           version="1.0"&gt;
    &lt;xs:element name="validation-config" type="config:validation-configType" xmlns:config="http://jboss.org/xml/ns/javax/validation/configuration"/&gt;
    &lt;xs:complexType name="validation-configType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-provider" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="message-interpolator" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="traversable-resolver" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-validator-factory" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-mapping" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="config:propertyType" name="property" maxOccurs="unbounded" minOccurs="0" xmlns:config="http://jboss.org/xml/ns/javax/validation/configuration"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="propertyType"&gt;
        &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:string"&gt;
                &lt;xs:attribute name="name" use="required" type="xs:string"/&gt;
            &lt;/xs:extension&gt;
        &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</programlisting>

    <para>See <xref linkend="xml-config" /> for more information on XML based
    configuration.</para>
  </section>
</chapter>
