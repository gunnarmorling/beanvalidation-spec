<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="introduction">
  <title>Introduction</title>

  <para>This document is the specification of the Java API for JavaBean
  validation in Java EE and Java SE. The technical objective of this work is
  to provide a class level constraint declaration and validation facility for
  the Java application developer, as well as a constraint metadata repository
  and query API.</para>

  <section>
    <title>Expert group</title>

    <para>This work is being conducted as part of JSR 349 and formerly JSR 303
    under the Java Community Process Program. This specification is the result
    of the collaborative work of the members of the JSR 349 Expert Group and
    the community at large.</para>

    <para revisionflag="added">Members of the JSR 349 expert group in
    alphabetical order are:</para>

    <itemizedlist revisionflag="added">
      <listitem>
        <para>...</para>
      </listitem>
    </itemizedlist>

    <para revisionflag="added"><remark>TODO: Add EG members</remark></para>

    <para>Former expert group members of JSR 303 in alphabetical order
    are:</para>

    <itemizedlist>
      <listitem>
        <para>Geert Bevin</para>
      </listitem>

      <listitem>
        <para>Emmanuel Bernard (Red Hat, Inc.) - Specification Lead</para>
      </listitem>

      <listitem>
        <para>Uri Boness</para>
      </listitem>

      <listitem>
        <para>Erik Brakkee (Ericsson AB)</para>
      </listitem>

      <listitem>
        <para>Ed Burns (Sun Microsystems, Inc.)</para>
      </listitem>

      <listitem>
        <para>Jason Carreira</para>
      </listitem>

      <listitem>
        <para>Robert Clevenger (Oracle - retired)</para>
      </listitem>

      <listitem>
        <para>Linda DeMichiel (Sun Microsystems, Inc.)</para>
      </listitem>

      <listitem>
        <para>Tim Fennel</para>
      </listitem>

      <listitem>
        <para>Bharath Ganesh (Pramati Technologies)</para>
      </listitem>

      <listitem>
        <para>Romain Guy (Google Inc.)</para>
      </listitem>

      <listitem>
        <para>Robert Harrop</para>
      </listitem>

      <listitem>
        <para>Jacob J. Hookom</para>
      </listitem>

      <listitem>
        <para>Bob Lee (Google Inc.)</para>
      </listitem>

      <listitem>
        <para>Craig R. McClanahan (Sun Microsystems, Inc.)</para>
      </listitem>

      <listitem>
        <para>Niall K. Pemberton</para>
      </listitem>

      <listitem>
        <para>Steve Peterson</para>
      </listitem>

      <listitem>
        <para>Dhanji R. Prasanna (Google Inc., formerly individual)</para>
      </listitem>

      <listitem>
        <para>Gerhard Petracek</para>
      </listitem>

      <listitem>
        <para>Matt Raible</para>
      </listitem>

      <listitem>
        <para>Michael Nascimento Santos</para>
      </listitem>

      <listitem>
        <para>Sebastian Thomschke</para>
      </listitem>

      <listitem>
        <para>Jon Wetherbee (Oracle)</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Specification goals</title>

    <para>Validating data is a common task that occurs throughout an
    application, from the presentation layer to the persistence layer. Often
    the same validation logic is implemented in each layer, proving to be time
    consuming and error-prone. To avoid duplication of these validations in
    each layer, developers often bundle validation logic directly into the
    domain model, cluttering domain classes with validation code that is, in
    fact, metadata about the class itself.</para>

    <para>This JSR defines a metadata model and API for JavaBean validation.
    The default metadata source is annotations, with the ability to override
    and extend the meta-data through the use of XML validation
    descriptors.</para>

    <para>The validation API developed by this JSR is not intended for use in
    any one tier or programming model. It is specifically not tied to either
    the web tier or the persistence tier, and is available for both
    server-side application programming, as well as rich client Swing
    application developers. This API is seen as a general extension to the
    JavaBeans object model, and as such is expected to be used as a core
    component in other specifications. Ease of use and flexibility have
    influenced the design of this specification.</para>

    <para revisionflag="added">As of version 1.1, Bean Validation constraints
    can also be applied to the parameters and return values of methods of
    arbitrary Java types. That way the Bean Validation API can be used to
    describe and validate the contract applying to a given method, that
    is</para>

    <itemizedlist revisionflag="added">
      <listitem>
        <para>the preconditions that must be met by the method caller before
        the method may be invoked and</para>
      </listitem>

      <listitem>
        <para>the postconditions that are guaranteed to the caller after a
        method invocation returns.</para>
      </listitem>
    </itemizedlist>

    <para revisionflag="added">This enables a programming style known as
    "Programming by Contract" (PbC). Note that it is <emphasis>not</emphasis>
    the goal of this specification to develop a fully-fledged PbC solution but
    rather an easy-to-use facility for fulfilling the most common needs
    related to applying constraints to method parameters and return values,
    based on the proven concepts of the Bean Validation API. Compared to
    traditional means of checking the sanity of a method's argument values and
    its return value this approach has several advantages:</para>

    <itemizedlist revisionflag="added">
      <listitem>
        <para>These checks are expressed declaratively and don't have to be
        performed manually, which results in less code to write, read and
        maintain.</para>
      </listitem>

      <listitem>
        <para>The pre- and postconditions applying for a method don't have to
        be expressed again in the method's documentation, since any of it's
        annotations will automatically be included in the generated JavaDoc.
        This reduces redundancies, avoiding efforts and inconsistencies
        between implementation and comments.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>How this document is organized</title>

    <para>This document describes each aspect of the bean validation
    specification in a separate chapter. One should remember that the
    specification is a consistent whole.</para>

    <para><xref linkend="constraintsdefinitionimplementation" /> describes how
    constraints are defined.</para>

    <para><xref linkend="constraintdeclarationvalidationprocess" /> describes
    how a JavaBean class is decorated with annotations to describe
    constraints.</para>

    <para><xref linkend="validationapi" /> describes how to programmatically
    validate a JavaBean.</para>

    <para><xref linkend="constraintmetadata" /> describes how the metadata
    query API works.</para>

    <para>In <xref linkend="terminology" />, key concepts are summarized. Some
    reviewers have found that reading the terminology section first helps to
    better understand the specification.</para>

    <para>JPA, JSF and EE integration are present at <xref
    linkend="appendix-jpa" />, <xref linkend="appendix-jsf" /> and <xref
    linkend="appendix-ee" /> for archive purposes, one should refer to the
    respective specifications for the up-to-date integration rules.</para>

    <para>The changelog can be found at <xref linkend="changelog" />.</para>
  </section>

  <section>
    <title>How to comment</title>

    <para revisionflag="changed">The expert group is eager to receive feedback
    from readers. Feel free to contact us on the JSR 349 <ulink
    url="mailto:beanvalidation-dev@lists.jboss.org">mailing list</ulink> and
    visit our <ulink url="http://beanvalidation.org/contribute">web
    site</ulink> to learn more on how to contribute to JSR 349.</para>
  </section>
</chapter>
