<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="exception">
  <title>Exception model</title>

  <para>Illegal arguments passed to the Bean Validation APIs generally lead to
  a <classname>IllegalArgumentException</classname> (see the JavaDoc for
  specific details). Other exceptions raised by Bean Validation are or inherit
  from the runtime exception
  <classname>javax.validation.ValidationException</classname>. Exception cases
  are described in their respective sections but include (non exhaustive
  list):</para>

  <itemizedlist>
    <listitem>
      <para>invalid constraint definitions (missing mandatory elements,
      illegal composition cycle, illegal attribute overriding, etc)</para>
    </listitem>

    <listitem>
      <para>invalid constraint declarations
      (<classname>ConstraintValidator</classname> implementation matching
      failure, etc)</para>
    </listitem>

    <listitem>
      <para>invalid group definition (circularity)</para>
    </listitem>

    <listitem>
      <para>invalid <classname>Default</classname> group redefinition for
      classes (missing class group etc)</para>
    </listitem>

    <listitem>
      <para>error when retrieving, initializing, executing
      <classname>ConstraintValidator</classname>s</para>
    </listitem>

    <listitem>
      <para>error when parsing the XML configuration or mappings</para>
    </listitem>

    <listitem>
      <para>multiple XML configuration files found</para>
    </listitem>

    <listitem>
      <para>missing expected provider or no default provider found</para>
    </listitem>

    <listitem>
      <para>missing no-arg constructor on extension implementations described
      in XML configuration files</para>
    </listitem>

    <listitem>
      <para>same entity described more than once across the XML mapping
      files</para>
    </listitem>

    <listitem>
      <para>same property or field described more than once for a given entity
      in the XML mapping files</para>
    </listitem>

    <listitem>
      <para>class, field or getter declared in XML mapping files but not
      found</para>
    </listitem>

    <listitem>
      <para>illegal XML constraint definition</para>
    </listitem>

    <listitem>
      <para>illegal XML constraint declaration</para>
    </listitem>

    <listitem>
      <para>exception raised either at initialization time or execution time
      by any of the extension interfaces</para>
    </listitem>
  </itemizedlist>

  <para>Each of these error cases lead to a
  <classname>ValidationException</classname> or a subclass of
  <classname>ValidationException</classname> (see following
  subsections).</para>

  <para>Every (runtime) exception raised either at initialization time or
  execution time by any of the extension interfaces
  (<classname>ConstraintValidator</classname>,
  <classname>ConstraintValidatorFactory</classname>,
  <classname>MessageInterpolator</classname>,
  <classname>TraversableResolver</classname>,
  <classname>ValidationProviderResolver</classname>) is wrapped in a
  <classname>ValidationException</classname>.</para>

  <para>If a constraint definition or constraint declaration is invalid for a
  given class, the metadata API should raise the according exception.</para>

  <section>
    <title revisionflag="changed">Error report
    <classname>ConstraintViolationException</classname> and
    <classname>MethodConstraintViolationException </classname></title>

    <para revisionflag="changed">Some frameworks or applications need to
    convey the result of a validation by raising an exception if a bean
    validation or method-level validation returns constraint
    violations.</para>

    <para revisionflag="changed">The Bean Validation API provides two
    reference exceptions for such cases. Frameworks and applications are
    encouraged to use <classname>ConstraintViolationException</classname>
    respectively <classname>MethodConstraintViolationException</classname> as
    opposed to custom exception types to increase consistency of the Java
    platform. The exceptions can be raised directly or wrapped into the
    framework or application specific parent exception.</para>

    <programlisting>/**
 * Reports the result of constraint violations
 *                                                    `
 * @author Emmanuel Bernard
 */
public class ConstraintViolationException extends ValidationException {
    private final Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations;

    /**
     * Creates a constraint violation report
     *
     * @param message error message
     * @param constraintViolations &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public ConstraintViolationException(String message,
                                        Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations) {
        super( message );
        this.constraintViolations = constraintViolations;
    }

    /**
     * Creates a constraint violation report
     *
     * @param constraintViolations &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public ConstraintViolationException(Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations) {
        super();
        this.constraintViolations = constraintViolations;
    }

    /**
     * Set of constraint violations reported during a validation
     *
     * @return &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public Set&lt;ConstraintViolation&lt;?&gt;&gt; getConstraintViolations() {
        return constraintViolations;
    }
}</programlisting>

    <para>The <classname>ConstraintViolationException</classname> carries a
    <classname>Set</classname> of
    <classname>ConstraintViolation</classname>.</para>

    <programlisting revisionflag="added">/**
 * Exception class to be thrown by integrators of the Bean Validation method validation feature.
 *
 * @author Gunnar Morling
 */
public class MethodConstraintViolationException extends ValidationException {

    private final Set&lt;MethodConstraintViolation&lt;?&gt;&gt; constraintViolations;

    /**
     * Creates a new {@link MethodConstraintViolationException}.
     *
     * @param constraintViolations A set of constraint violations for which this exception shall be created.
     */
    public MethodConstraintViolationException(
            Set&lt;? extends MethodConstraintViolation&lt;?&gt;&gt; constraintViolations) {

        this( null, constraintViolations );
    }

    /**
     * Creates a new {@link MethodConstraintViolationException}.
     *
     * @param message The message for the exception to be created.
     * @param constraintViolations A set of constraint violations for which this exception shall be created.
     */
    public MethodConstraintViolationException(String message,
                                              Set&lt;? extends MethodConstraintViolation&lt;?&gt;&gt; constraintViolations) {

        super( message );
        this.constraintViolations = constraintViolations == null ? Collections.&lt;MethodConstraintViolation&lt;?&gt;&gt;emptySet() : Collections
                .unmodifiableSet( constraintViolations );
    }

    /**
     * Returns the set of constraint violations reported during a validation.
     *
     * @return An unmodifiable set of {@link MethodConstraintViolation}s occurred during a method level validation call.
     */
    public Set&lt;MethodConstraintViolation&lt;?&gt;&gt; getConstraintViolations() {
        return constraintViolations;
    }
}</programlisting>

    <para revisionflag="added">The
    <classname>MethodConstraintViolationException</classname> carries a
    <classname>Set</classname> of
    <classname>MethodConstraintViolation</classname>.</para>

    <note revisionflag="changed">
      <para>Bean Validation never raises these exceptions itself. Other
      frameworks like Java Persistence 2 do.</para>
    </note>

    <note revisionflag="changed">
      <para>If these exceptions are meant to be send remotely,
      <classname>ConstraintViolation</classname> respectively
      <classname>MethodConstraintViolation</classname> objects should be
      <classname>Serializable</classname> as defined an explained in <xref
      linkend="validationapi-constraintviolation" />.</para>
    </note>
  </section>

  <section>
    <title>Constraint definition:
    <classname>ConstraintDefinitionException</classname></title>

    <para>If a constraint definition does not respect the Bean Validation
    rules or is inconsistent, a
    <classname>ConstraintDefinitionException</classname> is raised.
    <classname>ConstraintDefinitionException</classname> is a subclass of
    <classname>ValidationException</classname>.</para>

    <para>This exception can be raised during validation or when the metadata
    model for the class hosting this constraint is requested.</para>

    <note>
      <para>These exception cases can be determined at compile time by a tool
      such as an annotation processor.</para>
    </note>
  </section>

  <section>
    <title>Constraint declaration:
    <classname>ConstraintDeclarationException</classname> and
    <classname>UnexpectedTypeException</classname></title>

    <para>When a constraint declaration is illegal,
    <classname>ConstraintDeclarationException</classname> is raised.</para>

    <para><classname>ConstraintDeclarationException</classname> is a subclass
    of <classname>ValidationException</classname>.</para>

    <para>When the return type of a property cannot be processed for a given
    constraint, an <classname>UnexpectedTypeException</classname> is raised.
    This problem typically arise when either no
    <classname>ConstraintValidator</classname> or too many
    <classname>ConstraintValidator</classname>s match the return type (see
    <xref linkend="typevalidatorresolution" />).</para>

    <para><classname>UnexpectedTypeException</classname> is a subclass of
    <classname>ConstraintDeclarationException</classname>.</para>

    <para>This exception can be raised during validation or when the metadata
    model for the class hosting this constraint is requested.</para>

    <note>
      <para>These exception cases can be determined at compile time by a tool
      such as an annotation processor.</para>
    </note>
  </section>

  <section>
    <title>Group definition:
    <classname>GroupDefinitionException</classname></title>

    <para>When a group definition is illegal,
    <classname>GroupDefinitionException</classname> is raised. This typically
    arises when a cyclic group dependency is discovered, an illegal attribute
    overriding is defined etc.</para>

    <para><classname>GroupDefinitionException</classname> is a subclass of
    <classname>ValidationException</classname>.</para>

    <note>
      <para>These exception cases can be determined at compile time by a tool
      such as an annotation processor.</para>
    </note>
  </section>
</chapter>
