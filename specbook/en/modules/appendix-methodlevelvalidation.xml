<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<appendix id="appendix-methodlevelvalidation" revisionflag="deleted">
  <title>Proposal for method-level validation</title>

  <para>This proposition has not been integrated into the core specification
  and is not part of it. It remains here for archaeological purposes and will
  be seriously considered for a future revision of this specification. This
  proposal is likely to be a bit out of sync with the rest of the
  specification artifacts.</para>

  <note>
    <para>Bean Validation providers are free to implement this proposal as a
    specific extension. Such specific extension could for example be accessed
    via the use of the <methodname>Validator.unwrap</methodname>
    method.</para>
  </note>

  <para>A popular demand was to provide a method and parameter level
  validation mechanism reusing the constraint descriptions of the
  specification. This set of APIs is meant to be used by interceptor
  frameworks such as:</para>

  <itemizedlist>
    <listitem>
      <para>application frameworks like JSR-299</para>
    </listitem>

    <listitem>
      <para>component frameworks like Enterprise Java Beans</para>
    </listitem>

    <listitem>
      <para>aspect based frameworks</para>
    </listitem>
  </itemizedlist>

  <para>These frameworks can call the validation APIs to validate either the
  parameter list or the returned value of a method when such method is called.
  More precisely, validation occurs around a method invocation.</para>

  <para>This extension of the Bean Validation API allows to reuse the core
  engine as well as the constraint definition and declaration for such method
  level validations.</para>

  <para>The following APIs are added to
  <classname>Validator</classname>.</para>

  <programlisting>public interface Validator {
    // [...]
    
    
    /**
     * Validate each parameter value based on the constraints described on
     * the parameters of &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose parameters are currectly validated
     * @param parameterValues the parameter values passed to the method for invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if the Object[] does not match the method signature
     */
    &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(Class&lt;T&gt; clazz, Method method,
                                                       Object[] parameterValues,
                                                       Class&lt;?&gt;... groups);

    /**
     * Validate the parameter value based on the constraints described on
     * the parameterIndex-th parameter of &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose parameters are currectly validated
     * @param parameterValue the parameter value passed to the parameterIndex-t parameter of method
     * @param parameterIndex parameter index of the parameter validated in method
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if prameterIndex is out of bound
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameter(Class&lt;T&gt; clazz, Method method,
                                                   Object parameterValue,
                                                   int parameterIndex, Class&lt;?&gt;... groups);

    /**
     * Validate each parameter value based on the constraints described on
     * &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose result is validated
     * @param returnedValue the value returned by the method invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateReturnedValue(Class&lt;T&gt; clazz, Method method,
                                                       Object returnedValue, Class&lt;?&gt;... groups);

    /**
     * Validate each parameter value based on the constraints described on
     * the parameters of &lt;code&gt;constructor&lt;/code&gt;.
     *
     * @param clazz class hosting the constructor
     * @param constructor the constructor whose parameters are currectly validated
     * @param parameterValues the parameter values passed to the constructor for invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the constructor does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if the Object[] does not match the constructor signature
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameters(Class&lt;T&gt; clazz, Constructor constructor,
                                                    Object[] parameterValues, Class&lt;?&gt;... groups);

    /**
     * Validate the parameter value based on the constraints described on
     * the parameterIndex-th parameter of &lt;code&gt;constructor&lt;/code&gt;.
     *
     * @param clazz class hosting the constructor
     * @param constructor the method whose parameters are currectly validated
     * @param parameterValue the parameter value passed to the
     *                       parameterIndex-th parameter of constructor
     * @param parameterIndex parameter index of the parameter validated in constructor
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the constructor does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if prameterIndex is out of bound
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameter(Class&lt;T&gt; clazz, Constructor constructor,
                                                   Object parameterValue, int parameterIndex,
                                                   Class&lt;?&gt;... groups);</programlisting>

  <para>The constraints declarations evaluated are the constraints hosted on
  the parameters of the method or constructor. If
  <classname>@Valid</classname> is placed on a parameter, constraints declared
  on the object itself are considered.</para>

  <para><methodname>validateReturnedValue</methodname> evaluates the
  constraints hosted on the method itself. If <classname>@Valid</classname> is
  placed on the method, the constraints declared on the object itself are
  considered.</para>

  <programlisting>public @NotNull String saveItem(@Valid @NotNull Item item, @Max(23) BigDecimal price)</programlisting>

  <para>In the previous example,</para>

  <itemizedlist>
    <listitem>
      <para><literal>item</literal> is validated against
      <classname>@NotNull</classname> and all the constraints it hosts</para>
    </listitem>

    <listitem>
      <para><literal>price</literal> is validated against
      <classname>@Max(23)</classname></para>
    </listitem>

    <listitem>
      <para>the result of <methodname>saveItem</methodname> is validated
      against <classname>@NotNull</classname></para>
    </listitem>
  </itemizedlist>

  <para>Note that the Bean Validation specification does not trigger the
  validation call. An external framework is responsible for calling one of the
  <methodname>validateParameters</methodname>,
  <methodname>validateParameter</methodname> and
  <methodname>validateReturnedValue</methodname> methods at the appropriate
  time.</para>

  <para>For completeness, Bean Validation exposes metadata for constraints
  hosted on parameters and methods.</para>

  <programlisting>public interface ParameterDescriptor extends ElementDescriptor { 
    boolean isCascaded(); 
    int getIndex(); 
} 

public interface MethodDescriptor extends ElementDescriptor { 
    List&lt;ParameterDescriptor&gt; getParameterDescriptors(); //index aligned 
    boolean isCascaded(); 
} 

public interface ConstructorDescriptor extends ElementDescriptor { 
    List&lt;ParameterDescriptor&gt; getParameterDescriptors(); //index aligned 
} 

public interface BeanDescriptor { 
    MethodDescriptor getConstraintsForMethod(Method); 
    MethodDescriptor getConstraintsForConstructor(Constructor); 
    Set&lt;String&gt; getConstrainedProperties(); 
    Set&lt;Method&gt; getConstrainedMethods(); 
    Set&lt;Constructor&gt; getConstrainedConstructors(); 
} </programlisting>
</appendix>
